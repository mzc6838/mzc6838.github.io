<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux下安装Shadowsocks客户端并全局代理的方式</title>
    <url>/2020/02/23/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Shadowsocks%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B9%B6%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>因为学校要学嵌入式，要求装ubuntu，所以就想着把系统好好弄一下做好长期使用的准备。在安装完了Chrome之后想同步书签，自然想到了Shadowsocks来进行http和https的代理。</p>
<a id="more"></a>
<h1 id="Shadowsocks配置方法"><a href="#Shadowsocks配置方法" class="headerlink" title="Shadowsocks配置方法"></a>Shadowsocks配置方法</h1><p>首先安装Shadowsocks：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install shadowsocks</span><br></pre></td></tr></table></figure>
<p>接下来配置Shadowsocks的配置文件，使其连接到ss服务器：<br>编辑文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"server"</span>: <span class="string">"xxxx.com"</span>,</span><br><span class="line"> <span class="attr">"server_port"</span>: <span class="number">52239</span>,</span><br><span class="line"> <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line"> <span class="attr">"local_port"</span>: <span class="number">1080</span>,</span><br><span class="line"> <span class="attr">"password"</span>: <span class="string">"SOME_PASSWORD"</span>,</span><br><span class="line"> <span class="attr">"timeout"</span>: <span class="number">600</span>,</span><br><span class="line"> <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line"> <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保存后将客户端运行在后台：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup sslocal -c /etc/shadowsocks/config.json /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>至此，Shadowsocks配置工作就完成了</p>
<h1 id="polipo配置方法"><a href="#polipo配置方法" class="headerlink" title="polipo配置方法"></a>polipo配置方法</h1><p>首先安装polipo：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install polipo</span><br></pre></td></tr></table></figure>
<p>接下来配置polipo，使其连接到本地Shadowsocks代理:<br>编辑文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/polipo/config</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># This file only needs to list configuration variables that deviate</span><br><span class="line"># from the default values.  See /usr/share/doc/polipo/examples/config.sample</span><br><span class="line"># and "polipo -v" for variables you can tweak and further information.</span><br><span class="line"></span><br><span class="line">logSyslog = true</span><br><span class="line">logFile = /var/log/polipo/polipo.log</span><br><span class="line"></span><br><span class="line">socksParentProxy = "127.0.0.1:1080"</span><br><span class="line">socksProxyType = socks5</span><br><span class="line"></span><br><span class="line">chunkHighMark = 50331648</span><br><span class="line">objectHighMark = 16384</span><br><span class="line"></span><br><span class="line">serverMaxSlots = 64</span><br><span class="line">serverSlots = 16</span><br><span class="line">serverSlots1 = 32</span><br><span class="line"></span><br><span class="line">proxyAddress = "0.0.0.0"</span><br><span class="line">proxyPort = 8123</span><br></pre></td></tr></table></figure>
<p>重启polipo服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service polipo restart</span><br></pre></td></tr></table></figure>
<p>至此，polipo配置工作完成。</p>
<h1 id="更改全局环境变量，使代理生效"><a href="#更改全局环境变量，使代理生效" class="headerlink" title="更改全局环境变量，使代理生效"></a>更改全局环境变量，使代理生效</h1><p>执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export http_proxy="http://127.0.0.1:8123"</span><br></pre></td></tr></table></figure>
<p>此时，Terminal已经可以访问外部网站了，可以使用curl测试。<br>若希望系统内所有app均使用代理，则需要在设置-&gt;网络中编辑代理选项，将http和https代理均改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">地址：127.0.0.1</span><br><span class="line">端口：8123</span><br></pre></td></tr></table></figure>
<p>即可。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Shadowsocks</tag>
        <tag>polipo</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>first post</title>
    <url>/2020/02/11/first-post/</url>
    <content><![CDATA[<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world!"></a>hello world!</h1>]]></content>
  </entry>
  <entry>
    <title>find中加号问题</title>
    <url>/2020/06/19/find%E4%B8%AD%E5%8A%A0%E5%8F%B7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>安装galileo编译链时有个脚本，怎么都装不进去，报错为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo ./install_script.sh  </span><br><span class="line">Setting it up...find: 非法权限 `+111<span class="string">'</span></span><br><span class="line"><span class="string">/tmp/tmp.bbrqETRw01/relocate_sdk.sh /home/mzc6838/i586/relocate_sdk.sh</span></span><br><span class="line"><span class="string">SDK could not be set up. Relocate script failed. Abort!</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="找问题"><a href="#找问题" class="headerlink" title="找问题"></a>找问题</h1><p>既然是find出现的问题，还是+111这种，直接搜索install_script.sh里面“+111”有这么一条：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">executable_files=$(<span class="variable">$SUDO_EXEC</span> find <span class="string">"<span class="variable">$native_sysroot</span>"</span> -<span class="built_in">type</span> f -perm +111 -<span class="built_in">exec</span> <span class="built_in">printf</span> <span class="string">"\"%s\" "</span> &#123;&#125; \; )</span><br></pre></td></tr></table></figure>
<p>我寻思不对啊，网上找了一圈都说+号可以用，表示权限中任意一个1匹配<br></p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在我重新百度了好久之后，找到了解决办法就是：</p>
<blockquote>
<p>用”/“代替”+”</p>
</blockquote>
<p>可以，很顶的操作，确实有效。<br>原话是这么说的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">perm +mode</span><br><span class="line">              This  is  no  longer  supported  (and  has been deprecated since</span><br><span class="line">              2005).  Use -perm &#x2F;mode instead.</span><br></pre></td></tr></table></figure>
<p>所以这么看来网上那些复制人都是2005年的老古董咯</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown折叠代码块的方法</title>
    <url>/2020/02/19/markdown%E6%8A%98%E5%8F%A0%E4%BB%A3%E7%A0%81%E5%9D%97%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>&emsp;刚才在迁移远古博客的时候有一段特别特别长的代码段，如果单独放在前端里面显示估计也没几个人看得下去，所以就去查了一下怎么能吧那段代码 既保留 又折叠<br>&emsp;然后就有了下面的方法。</p>
<a id="more"></a>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>一般在插入代码段时使用三个`号（esc键下面的符号）<br>在这里要折叠代码段使用如下方法(我是格式警犬不要怪我占篇幅)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mark</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">darkred</span>&gt;</span>点击查看详细内容<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> - 测试 测试测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">code</span>&gt;</span>  </span><br><span class="line">for i in a:</span><br><span class="line">    print(i)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>summary：折叠语法展示的摘要</p>
<p>details：折叠语法标签</p>
<p>pre：以原有格式显示元素内的文字是已经格式化的文本。</p>
<p>blockcode：表示程序的代码块。</p>
<p>code：指定代码范例。</p>
<p>经过测试，可以直接在各标签中指定元素的style（即变色，字体大小什么的）</p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><details>
    <summary>
        <mark>
            <font color="darkred">点击查看详细内容</font>
        </mark>
    </summary>
  <p> - 测试 测试测试</p>
    <pre>
        <code>  
for i in a:
    print(i)
        </code>
    </pre>
</details>
<br><br>

<blockquote>
<p>资料来源：<a href="https://www.cnblogs.com/byho/p/10570145.html" target="_blank" rel="noopener">MarkDown折叠语法</a></p>
</blockquote>
]]></content>
      <categories>
        <category>博客建设</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView食用指南</title>
    <url>/2020/02/19/RecyclerView%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>&emsp;说起来也是好久没有写过博客了，这东西来来回回就忘了，当时的脑热造就了空白的内容，想想多少还是有些不合适。<br>&emsp;毕竟也是自己的经历，不如写出来分享一下，或者说，备忘吧。</p>
<h2 id="RecyclerView总述"><a href="#RecyclerView总述" class="headerlink" title="RecyclerView总述"></a>RecyclerView总述</h2><p>&emsp;安卓开发过程中总会遇到各种麻烦的事情。在编写浏览器时想要构造一个列表，这里面可以显示网站的标题和链接。这东西看起来感觉非常简单，尤其是在h5界面中编写。但是现在是安卓开发啊弟弟，用法根本不是想象中的那样搞一个模块然后findviewbyid啊。这里我踩了很多坑，并且构造过程真的非常麻烦（自我感觉），所以在这里开一个页面记录下我在这里是怎么解决问题的。</p>
<blockquote>
<p>RecyclerView 是一个增强版的ListView，不仅可以实现和ListView同样的效果，还优化了ListView中存在的各种不足之处（来自CSDN）。<br>RecyclerView 能够实现横向滚动，这是ListView所不能实现的（虽然我没用到这个233）</p>
</blockquote>
<a id="more"></a>

<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>&emsp;dependencies中要添加库的引用（以下库可能已过时）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile&amp;nbsp;<span class="string">'com.android.support:appcompat-v7:27.0.2'</span></span><br><span class="line">    compile&amp;nbsp;<span class="string">'com.android.support:recyclerview-v7:27.0.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;这里注意下后面的版本号要跟compileSdkVersion一致，不然可能会报错。</p>
<h2 id="布局引用"><a href="#布局引用" class="headerlink" title="布局引用"></a>布局引用</h2><p>&emsp;在要添加RecyclerView的布局中添加:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">linearlayout</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.recyclerview</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">linearlayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>&emsp;布局文件就到这里了，其实布局是非常简单的。。<br>&emsp;重点在下面的部分。</p>
<h2 id="适配器（Adapter）的创建"><a href="#适配器（Adapter）的创建" class="headerlink" title="适配器（Adapter）的创建"></a>适配器（Adapter）的创建</h2><h3 id="内容提供"><a href="#内容提供" class="headerlink" title="内容提供"></a>内容提供</h3><p>&emsp;首先我们要明确，创建这个适配器是要适配什么东西，在这里，作为一个浏览器，我打算让它提供页面的标题和链接，并且可以让它显示在RecyclerView中。所以我们先要创建最基本的类型，在这里我取名叫WindowInfo，很简单的一个类，并且在这个类中只需要提供setter和getter就行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String windowTitle;</span><br><span class="line">    <span class="keyword">private</span> String windowUrl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WindowInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        windowTitle = <span class="string">""</span>;</span><br><span class="line">        windowUrl = <span class="string">""</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WindowInfo</span><span class="params">(String title, String url)</span></span>&#123;</span><br><span class="line">        windowTitle = title;</span><br><span class="line">        windowUrl = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWindowTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> windowTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWindowUrl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> windowUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWindowTitle</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        windowTitle = title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;这里真的没什么说的，自定义的类都可以。</p>
<h3 id="适配器创建"><a href="#适配器创建" class="headerlink" title="适配器创建"></a>适配器创建</h3><p>&emsp;再新建一个类，我这里取名为WindowInfoAdapter，让这个类继承于RecyclerView.Adapter&lt;WindowInfoAdapter.ViewHolder&gt;，现在爆红先不要紧张，后面会填坑（<br>&emsp;在这个适配器的类中，我们需要创建一个内部的List表，用来存放外部传进来的提供的内容。既然要把外部的内容传进来，那么必不可少的就是构造函数了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WindowInfoAdapter</span><span class="params">(List&lt;windowinfo&gt; _windowList)</span></span>&#123;</span><br><span class="line">    windowList = _windowList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;但是我们不可能仅仅把参数传进来就完事吧，RecyclerView里面每个项目的排版不要面子的吗？<br>&emsp;新建一个布局，自己起名叫WindowInfoItem.xml，这个排版是用来设置RecyclerView 中每个项目里面元素的样式的，是不可缺少的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">linearlayout</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">ndroid:orientation</span>=<span class="string">"vertical"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"64dp"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_centervertical</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textview</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/title"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginstart</span>=<span class="string">"5dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginend</span>=<span class="string">"5dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:textcolor</span>=<span class="string">"#000000"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:textsize</span>=<span class="string">"20sp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleline</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textview</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/url"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginstart</span>=<span class="string">"5dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginend</span>=<span class="string">"5dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:textcolor</span>=<span class="string">"#c0c0c0"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:textsize</span>=<span class="string">"16sp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleline</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">linearlayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>&emsp;接下来的工作可以说是非常重要了，现在仅仅是将排版排好了，但是其中的部件都不能单独拿出来设置以及初始化呀。所以现在新建一个静态内部类ViewHolder使其继承自RecyclerView.ViewHolder，由它的名字就可以知道，这个类主要是用来承载所有的部件的，所以就可以在这里取得元素的id，并且对其进行初始化了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">    TextView Title;</span><br><span class="line">    TextView Url;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(view);</span><br><span class="line">        bookmarkTitle = (TextView) view.findViewById(R.id.title);</span><br><span class="line">        bookmarkUrl = (TextView) view.findViewById(R.id.url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;但这还没完呢，机器毕竟不是人，凭什么要按你的样式来？所以我们需要强制指定布局，重写onCreateViewHolder:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">    View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.WindowInfoItem, parent, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">final</span> ViewHolder viewHolder = <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line">    <span class="keyword">return</span> viewHolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;并且，就算是创建了ViewHolder，但是你并不能改变其内容，因为目前的ViewHolder很广泛，就如同大家的公用rbq一样，那可不行，得指定谁用谁的女朋友啊。所以，onBindViewHolder是必须得重写的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> ViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    WindowInfo windowInfo = windowList.get(position)</span><br><span class="line">    holder.Url.setText(<span class="string">""</span>);</span><br><span class="line">    holder.Title.setText(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;现在看看整个class，会发现在声明那里仍然是爆红的，不要慌，只需要将getItemCount重写就行了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> windowList.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;到这里为止，整个适配器就创建完成了，贴上整体的代码：</p>
<details>
    <summary><mark style="background: gray;color: white">点击查看详细代码</mark></summary>
    <pre language="java"><code>
public class WindowInfoAdapter extends RecyclerView.Adapter<windowinfo.viewholder> {
    private List<windowinfo> windowList;

<pre><code>static class ViewHolder extends RecyclerView.ViewHolder {
    TextView Title;
    TextView Url;

    public ViewHolder(View view){
        super(view);
        siteTitle = (TextView) view.findViewById(R.id.Title);
        siteUrl = (TextView) view.findViewById(R.id.Url);
    }
}

public WindowInfoAdapter(List&lt;windowinfo&gt; _windowList){
    windowList = _windowList;
}

@Override
public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
    View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.WindowInfoItem, parent, false);
    final ViewHolder viewHolder = new ViewHolder(view);
    return viewHolder;
}

@Override
public void onBindViewHolder(final ViewHolder holder, int position) {
    WindowInfo windowInfo = windowList.get(position);
    holder.Title.setText(&quot;&quot;);
    holder.Url.setText(&quot;&quot;);
}

@Override
public int getItemCount() {
    return windowList.size();
}</code></pre><p>}<br>    </p></windowinfo></windowinfo.viewholder></code></pre><p></p>
</details>

<h2 id="RecyclerView启动！"><a href="#RecyclerView启动！" class="headerlink" title="RecyclerView启动！"></a>RecyclerView启动！</h2><p>&emsp;前面bb了一大堆，就是为这里打基础的，其实这里就很简单了，我们回到MainActivity中来，首先要做的是创建三个变量，分别是:</p>
<ul>
<li>内容提供类的一个列表：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;windowinfo&gt; windowInfoList;</span><br></pre></td></tr></table></figure></li>
<li>适配器：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> WindowInfoAdapter windowInfoAdapter;</span><br></pre></td></tr></table></figure></li>
<li>RecyclerView:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> RecyclerView windowInfoRecyclerView;</span><br></pre></td></tr></table></figure>
&emsp;再将RecyclerView实例化之后，我们只需要执行这几步:</li>
</ul>
<ul>
<li>先将内容绑定到适配器中：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">windowInfoAdapter = <span class="keyword">new</span> WindowInfoAdapter(windowInfoList);</span><br></pre></td></tr></table></figure></li>
<li>再将适配器与RecyclerView绑定：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">windowInfoRecyclerView.setAdapter(windowInfoAdapter);</span><br></pre></td></tr></table></figure></li>
<li>最后设置一些关于RecyclerView的比较重要的设定（分割线动画什么的）：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">windowInfoRecyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</span><br><span class="line">windowInfoRecyclerView.addItemDecoration(<span class="keyword">new</span> DividerItemDecoration(<span class="keyword">this</span>,DividerItemDecoration.VERTICAL));</span><br></pre></td></tr></table></figure>
&emsp;整个过程就结束了，这么一整理下来感觉真简单啊= =||</li>
</ul>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>&emsp;RecyclerView其实真的挺重要的，因为在大多数场合都会用到，并且与其他的View也能达到良好的兼容性，可以说很棒了。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>RecyclerView</tag>
      </tags>
  </entry>
  <entry>
    <title>关于tensorflow解析csv的问题</title>
    <url>/2020/09/12/%E5%85%B3%E4%BA%8Etensorflow%E8%A7%A3%E6%9E%90csv%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>初学tensorflow，看教程中引入波士顿房价数据，自己使用curl导入后，在csv解析过程中出现了问题。错误信息如下图所示<br><img src="/2020/09/12/%E5%85%B3%E4%BA%8Etensorflow%E8%A7%A3%E6%9E%90csv%E7%9A%84%E9%97%AE%E9%A2%98/error.png" alt="错误提示"></p>
<a id="more"></a>
<h1 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h1><p>原始csv数据在网站上以空格字符和换行符分割，在本地处理该数据时，只是单纯地去掉了换行符。因为自己觉得空格也能被解析，直到用excel打开这个csv文件后发现不对：<br><img src="/2020/09/12/%E5%85%B3%E4%BA%8Etensorflow%E8%A7%A3%E6%9E%90csv%E7%9A%84%E9%97%AE%E9%A2%98/befor.png" alt="错误的csv格式"><br>看起来是正确的，直到我把第一列拉宽：<br><img src="/2020/09/12/%E5%85%B3%E4%BA%8Etensorflow%E8%A7%A3%E6%9E%90csv%E7%9A%84%E9%97%AE%E9%A2%98/after.png" alt="第一列"></p>
<h1 id="更正方式"><a href="#更正方式" class="headerlink" title="更正方式"></a>更正方式</h1><p>使用python将原始文件打开，因为有的空缺部分是两个空格，有的是三个空格字符，所以这次使用了两次.replace()方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removenbsp</span><span class="params">()</span>:</span></span><br><span class="line">    f = open(<span class="string">'boston_housing_t.csv'</span>, <span class="string">"r"</span>)</span><br><span class="line">    o = open(<span class="string">'boston_housing_t_t.csv'</span>, <span class="string">"w"</span>)</span><br><span class="line">    l = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        t = i.replace(<span class="string">' '</span>, <span class="string">','</span>)</span><br><span class="line">        t = t[<span class="number">1</span>:]</span><br><span class="line">        t = t.replace(<span class="string">',,'</span>, <span class="string">','</span>)</span><br><span class="line">        t = t.replace(<span class="string">',,'</span>, <span class="string">','</span>)</span><br><span class="line">        o.write(t)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    f.close()</span><br><span class="line">    o.close()</span><br></pre></td></tr></table></figure>
<p>代码执行后的csv文件中的数据格式就可以正确解析了：<br><img src="/2020/09/12/%E5%85%B3%E4%BA%8Etensorflow%E8%A7%A3%E6%9E%90csv%E7%9A%84%E9%97%AE%E9%A2%98/correct.png" alt="正确的解析"></p>
]]></content>
      <categories>
        <category>python</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>csv</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制数转换为BCD码的一种算法</title>
    <url>/2020/10/30/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%B8%BABCD%E7%A0%81%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>七段数码管想要显示十进制数字，需要将原始输入的二进制数字转换为每一位对应的长度为7的二进制数。例如，数字5对应数码管显示应该为</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以共阴极为例</span></span><br><span class="line"><span class="number">5</span>: seg_t = <span class="number">7'b1011011</span>;</span><br></pre></td></tr></table></figure>
<p>但是如果待显示的数字为二进制表示的一个数，并且在fpga对除法运算的效率极差的情况下，是否可用一种组合逻辑电路将该数字转换成BCD码，进而可以方便地使用数码管显示。</p>
<a id="more"></a>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>网上找到了相关二进制转BCD码的一个算法，并且提供了相关例程代码。<br>该算法的具体过程如下：</p>
<ol>
<li>如果某列的数比5大，则给该列的数+3。</li>
<li>将列中所有的数左移1位，末尾用原数的对应位二进制补上。</li>
<li>如果左移8位后，不会再产生变化，则算法结束，此时列表中的对应列就是所需要的BCD编码。</li>
<li>回到步骤1继续执行。</li>
</ol>
<p>算法示例使用的原数为8位二进制的数，但以相同的算法，可以做到任意位数二进制数转BCD编码。</p>
<p>例程代码如下：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> BCD(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] binary,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] Hundreds,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] Tens,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] Ones</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">integer</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(binary) <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">//置位</span></span><br><span class="line">        Hundreds = <span class="number">4'd0</span>;</span><br><span class="line">        Tens = <span class="number">4'd0</span>;</span><br><span class="line">        Ones = <span class="number">4'd0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i = i - <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">//大于等于5判断</span></span><br><span class="line">            <span class="keyword">if</span> (Hundreds &gt;= <span class="number">5</span>) </span><br><span class="line">                Hundreds = Hundreds + <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span> (Tens &gt;= <span class="number">5</span>) </span><br><span class="line">                Tens = Tens + <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span> (Ones &gt;= <span class="number">5</span>) </span><br><span class="line">                Ones = Ones + <span class="number">3</span>;</span><br><span class="line">            <span class="comment">//移位</span></span><br><span class="line">            Hundreds = Hundreds &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            Hundreds[<span class="number">0</span>] = Tens[<span class="number">3</span>];</span><br><span class="line">            Tens = Tens &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            Tens[<span class="number">0</span>] = Ones[<span class="number">3</span>];</span><br><span class="line">            Ones = Ones &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            Ones[<span class="number">0</span>] = binary[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>网站链接在这里：<a href="https://my.eng.utah.edu/~nmcdonal/Tutorials/BCDTutorial/BCDConversion.html" target="_blank" rel="noopener">Binary to BCD</a></p>
]]></content>
      <categories>
        <category>verilog</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title>RGB颜色转换为16bits颜色的方法</title>
    <url>/2020/12/15/RGB%E9%A2%9C%E8%89%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA16bit%E9%A2%9C%E8%89%B2%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>在使用MPS2自带的显示屏时，其中有一个方法用来在LCD上显示一张Bitmap，要求其颜色格式为16bits的颜色。由于以前都是使用RGB颜色，现在突然要使用16bits颜色，并不熟悉，所以就去了解了一下。</p>
<a id="more"></a>

<h1 id="16bits颜色格式"><a href="#16bits颜色格式" class="headerlink" title="16bits颜色格式"></a>16bits颜色格式</h1><p>按照一篇博客中的说法，RGB颜色是24位的，要将24位颜色转换为16位，需要将每种颜色的值进行移位并舍去部分。具体过程如下：  </p>
<ul>
<li>红色(R)右移3位</li>
<li>绿色(G)右移2位</li>
<li>蓝色(B)右移3位  </li>
</ul>
<p>正常24bits颜色如下：  </p>
<center><font style="color: red;">RRRR RRRR </font><font style="color: green;">GGGG GGGG </font><font style="color: blue;">BBBB BBBB</font></center>
按照上述移位过程后，按原来的RGB顺序组合即为16bits颜色  
<center><font style="color: red;">RRRR R</font><font style="color: green;">GGG GGG</font><font style="color: blue;">B BBBB</font></center>

<blockquote>
<p>参考博文: <a href="https://www.cnblogs.com/eruca520/p/10189909.html" target="_blank" rel="noopener">如何将24位RGB颜色转换16位RGB颜色</a> </p>
</blockquote>
<h1 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h1><p>由于位数并不对齐（指会出现5bits、6bits这种位宽的数据），在转换时需要使用位运算：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> short <span class="title">RGB2bit</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> R, <span class="keyword">unsigned</span> <span class="keyword">char</span> G, <span class="keyword">unsigned</span> <span class="keyword">char</span> B)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ((R &gt;&gt; <span class="number">3</span>) &lt;&lt; <span class="number">11</span>) | ((G &gt;&gt; <span class="number">2</span>) &lt;&lt; <span class="number">5</span>) | (B &gt;&gt; <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>关于在MPS2上运行编译的文件显示&quot;Unable to open file&quot;的解决办法</title>
    <url>/2020/12/21/%E5%85%B3%E4%BA%8E%E5%9C%A8MPS2%E4%B8%8A%E8%BF%90%E8%A1%8C%E7%BC%96%E8%AF%91%E7%9A%84%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BAUnable-to-open-file%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>以ARM公司的MPS2平台编译了一个新的程序，运行这个程序需要将从keil中生成的.axf文件复制到单片机根目录下的SOFTWARE文件夹中，在重启单片机之后UART并没有任何输出信息，查看LOG.TXT文件发现出现了问题：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ARM V2M-MPS2 CMSIS-DAP Firmware v2.1.7</span><br><span class="line">Build Date: Aug 19 2015</span><br><span class="line"></span><br><span class="line">MotherBoard Revision C Variant A</span><br><span class="line">MotherBoard Serial Number 0287000101-0054 </span><br><span class="line"></span><br><span class="line">ARM V2M Boot Loader v1.0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Switching on main power...</span><br><span class="line"></span><br><span class="line">Configuring motherboard (rev C, var A)...</span><br><span class="line"></span><br><span class="line">Reading Board File \MB\HBI0263C\AN511\an511_v1.txt</span><br><span class="line"></span><br><span class="line">Configuring FPGA from file \MB\HBI0263C\AN511\an511_v1.rbf</span><br><span class="line">FPGA config: PASSED</span><br><span class="line"></span><br><span class="line">OSCCLK config: PASSED</span><br><span class="line"></span><br><span class="line">Writing SCC 0x00000010 with board revision C</span><br><span class="line">Writing SCC 0x00000000 with 0x00000001</span><br><span class="line"></span><br><span class="line">Reading images file \MB\HBI0263C\AN511\images.txt</span><br><span class="line">Writing ELF File \SOFTWARE\cortex_m3_cpp.axf</span><br><span class="line">Unable to open file</span><br><span class="line">ERROR: Failed to Write File \SOFTWARE\cortex_m3_cpp.axf to Address 0x0</span><br><span class="line"></span><br><span class="line">End of log file.</span><br></pre></td></tr></table></figure>
<p>很奇怪，一开始以为是哪里参数设定有问题，或者是编译目标平台选错了。但是在再三确定后，问题应该不是出在程序上。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>keil官方支持页面上有这个问题的解决办法：文件名过长。<br>原话是这样说的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In this case, the filename for the image is too long. Verify that the base name of the file is 8 characters or less. The MPS2+ board only supports short (SFN or 8.3) filenames. Feel free to use extra folders to distinguish between different images.</span><br></pre></td></tr></table></figure>
<p>很迷惑的一个问题，一般真的想不到这方面。将文件名改正后，程序运行正常。<br>附：<a href="https://www.keil.com/support/docs/3976.htm" target="_blank" rel="noopener">keil官方支持页面</a></p>
]]></content>
      <tags>
        <tag>单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>AXI DMA传输探究</title>
    <url>/2021/10/26/AXI%20DMA%E4%BC%A0%E8%BE%93%E6%8E%A2%E7%A9%B6/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>在设计中需要使用DMA从zynq的PS端中的DDR部分将数据高速传输至外设中. 自然会想到使用DMA进行数据交互. 本次设计打算使用DMA对外设中的RAM进行读写操作. 写操作没有任何问题, 但是在进行读操作时总是得不到正确的数据.</p>
<a id="more"></a>
<h1 id="出现问题分析"><a href="#出现问题分析" class="headerlink" title="出现问题分析"></a>出现问题分析</h1><p>整体传输波形如下图所示, 传输首先进行一次写216个数据的操作, 紧接着对着216个数据进行读操作. 重复一次.<br><img src="/2021/10/26/AXI%20DMA%E4%BC%A0%E8%BE%93%E6%8E%A2%E7%A9%B6/all_wave2.png" alt="all_wave"><br>注意箭头标出处, <code>M_AXIS_TREADY</code>信号意外拉高了, 在一开始甚至TREADY信号一直保持高电平. 后两次是在读操作传输完毕后仍然保持高电平. 这直接导致外设中的状态机错误识别到TREADY信号而对TDATA进行写数据. 这样的话, 在S2MM传输时, 传输的数据会有<b>4周期</b>的错误数据, 出现在一开始, 则会产生4个0, 出现在传输结束后, 则会产生0,1,2,3这4个错误数据. 其波形如下图所示:<br><img src="/2021/10/26/AXI%20DMA%E4%BC%A0%E8%BE%93%E6%8E%A2%E7%A9%B6/ready1.png" alt="ready1"><br><img src="/2021/10/26/AXI%20DMA%E4%BC%A0%E8%BE%93%E6%8E%A2%E7%A9%B6/ready2.png" alt="ready2"><br>这样造成S2MM接口向主机写入数据出错:<br><img src="/2021/10/26/AXI%20DMA%E4%BC%A0%E8%BE%93%E6%8E%A2%E7%A9%B6/data_trans.png" alt="data_trans"><br><img src="/2021/10/26/AXI%20DMA%E4%BC%A0%E8%BE%93%E6%8E%A2%E7%A9%B6/data_trans2.png" alt="data_trans2"><br>自然, 由串口接收到的数据也是错误的:<br><img src="/2021/10/26/AXI%20DMA%E4%BC%A0%E8%BE%93%E6%8E%A2%E7%A9%B6/data1.png" alt="data1"><br><img src="/2021/10/26/AXI%20DMA%E4%BC%A0%E8%BE%93%E6%8E%A2%E7%A9%B6/data2.png" alt="data2">  </p>
<h1 id="问题推断过程"><a href="#问题推断过程" class="headerlink" title="问题推断过程"></a>问题推断过程</h1><p>从波形中经过反复验证, 可以确定, AXI_DMA模块中存在一块Buffer(FIFO类), 当TREADY和TVALID同时拉高时, 该FIFO会自动写入TDATA内容, 虽然我们并不想让它进行写入. 但是, 如果不主动拉高TVALID信号, TREADY信号就不会在4周期后拉低, 造成死锁. 在Xilinx的DMA手册上指出:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Note:In the absence of any setup (that is, before it is programmed to run), AXI DMA will </span><br><span class="line">pull the s_axis_s2mm_tready signal Low after taking in four beats of streaming data. This </span><br><span class="line">will throttle the input data stream. To have a minimum amount of throttling, ensure that </span><br><span class="line">the AXI DMA is set up to run much before the actual data arrives.   --PG021: 69</span><br></pre></td></tr></table></figure>
<p>但在配置完毕寄存器后, TREADY信号仍然没有主动拉低(从波形可以看出). 故从硬件上不方便进行修正, 那么解决方案如下.  </p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>接收的数组主动多开4个位置.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">216</span>];</span><br><span class="line">b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">220</span>];   <span class="comment">// 220 = 216 + 4</span></span><br><span class="line"></span><br><span class="line">dma.writeReg(MOBILENET_S00_AXI_SLV_CONFIG_REG_OFFSET, <span class="number">0x7</span>);</span><br><span class="line"></span><br><span class="line">dma.trans_DMA_device(a, <span class="number">216</span>); <span class="comment">// W</span></span><br><span class="line"></span><br><span class="line">dma.writeReg(MOBILENET_S00_AXI_SLV_CONFIG_REG_OFFSET, <span class="number">0x5</span>);</span><br><span class="line"></span><br><span class="line">dma.trans_device_DMA(b, <span class="number">300</span>); <span class="comment">// R</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">216</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b[i + <span class="number">4</span>] &lt;&lt; <span class="string">" "</span>;    <span class="comment">// offset</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样虽然在硬件上没有做出对应的解决办法, 但至少在软件中得到了正确的结果.</p>
]]></content>
      <categories>
        <category>FPGA</category>
        <category>zynq</category>
      </categories>
      <tags>
        <tag>AXI</tag>
        <tag>DMA</tag>
        <tag>FPGA</tag>
        <tag>zynq</tag>
      </tags>
  </entry>
  <entry>
    <title>目标检测中的mAP是怎么计算出来的</title>
    <url>/2022/02/24/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%B8%AD%E7%9A%84mAP%E6%98%AF%E6%80%8E%E4%B9%88%E8%AE%A1%E7%AE%97%E5%87%BA%E6%9D%A5%E7%9A%84/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>通常情况下，在标准的分类模型中，衡量一个模型对某一类的分类准确度，只需要通过Softmax等方式将预测占比输出，即为该类的识别准确度。但是在目标检测任务中，神经网络模型执行的不仅仅是分类任务，还需要把目标所在的位置以坐标的形式作为预测之一返回。那么在目标检测中，通常使用mAP这一参数衡量一个模型的检测准确度。</p>
<a id="more"></a>

<h1 id="mAP是什么"><a href="#mAP是什么" class="headerlink" title="mAP是什么"></a>mAP是什么</h1><p>mAP全称：mean Average Precision，即各类别的AP平均值。AP则为PR曲线下为面积。PR曲线表示查准率(Precision)和查全率(Recall)绘制出的曲线。  </p>
<h1 id="mAP如何计算"><a href="#mAP如何计算" class="headerlink" title="mAP如何计算"></a>mAP如何计算</h1><h2 id="Precision-与-Recall"><a href="#Precision-与-Recall" class="headerlink" title="Precision 与 Recall"></a>Precision 与 Recall</h2><p>为了计算出查准率和查全率，有几个参数需要在预测后与Ground Truth做对比，以下参数需要通过后处理计算出：  </p>
<table>
<thead>
<tr>
<th align="center">缩写</th>
<th align="center">全称</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">TP</td>
<td align="center">True Positive</td>
<td align="left">$IoU &gt; IoU_{threshold}$的检测框数量，对于同一GT只计算一次</td>
</tr>
<tr>
<td align="center">FP</td>
<td align="center">False Positive</td>
<td align="left">$IoU &lt; IoU_{threshold}$的检测框数量或检测到同一个GT的多余检测框的数量</td>
</tr>
<tr>
<td align="center">FN</td>
<td align="center">False Negative</td>
<td align="left">没有被检测到的GT数量</td>
</tr>
<tr>
<td align="center">TN</td>
<td align="center">True Negative</td>
<td align="left">在目标识别中用不到</td>
</tr>
</tbody></table>
<p>故对于查准率和查全率，有如下两个等式用于计算：<br>$Precision = \frac{TP}{TP + FP}$<br><br>$Recall = \frac{TP}{TP + FN}$<br><br>由Precision和Recall绘制出的曲线如下图，下图是VOC2012中选取的自行车类别的Precision-Recall图：<br><img src="/2022/02/24/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%B8%AD%E7%9A%84mAP%E6%98%AF%E6%80%8E%E4%B9%88%E8%AE%A1%E7%AE%97%E5%87%BA%E6%9D%A5%E7%9A%84/bicycle.png" alt>  </p>
<h2 id="AP-与-mAP"><a href="#AP-与-mAP" class="headerlink" title="AP 与 mAP"></a>AP 与 mAP</h2><p>如上文所述，AP为PR曲线中由曲线与坐标轴围成的面积大小，通常情况下使用插值的方式计算该部分的面积。<br>图中为单一自行车类别的AP值，那么整体模型在数据集VOC2012上的mAP则为所有类别的AP的均值，作为最终的mAP值。<br>通过计算mAP，可以得知一个模型在对应数据集上针对每个类别的预测概率与预测框的位置偏移情况，如下图所示：<br><img src="/2022/02/24/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E4%B8%AD%E7%9A%84mAP%E6%98%AF%E6%80%8E%E4%B9%88%E8%AE%A1%E7%AE%97%E5%87%BA%E6%9D%A5%E7%9A%84/mAP.png" alt><br>可见对于瓶子(bottle)类别，训练出的目标检测模型对这个类别的识别度不是很好，而对于猫(cat)和狗(dog)等类别，识别率都是非常高的。网络整体的mAP达到了79.23%。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><blockquote>
<p>[1] <a href="https://www.zhihu.com/question/53405779" target="_blank" rel="noopener">目标检测中的mAP是什么含义？</a><br>[2] <a href="https://github.com/bubbliiiing/mobilenet-ssd-keras" target="_blank" rel="noopener">mobilenet-ssd-keras</a></p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>SSD</tag>
        <tag>Keras</tag>
      </tags>
  </entry>
</search>
