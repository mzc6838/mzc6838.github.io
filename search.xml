<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux下安装Shadowsocks客户端并全局代理的方式</title>
    <url>/2020/02/23/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Shadowsocks%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B9%B6%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>因为学校要学嵌入式，要求装ubuntu，所以就想着把系统好好弄一下做好长期使用的准备。在安装完了Chrome之后想同步书签，自然想到了Shadowsocks来进行http和https的代理。</p>
<a id="more"></a>
<h1 id="Shadowsocks配置方法"><a href="#Shadowsocks配置方法" class="headerlink" title="Shadowsocks配置方法"></a>Shadowsocks配置方法</h1><p>首先安装Shadowsocks：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install shadowsocks</span><br></pre></td></tr></table></figure>
<p>接下来配置Shadowsocks的配置文件，使其连接到ss服务器：<br>编辑文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"server"</span>: <span class="string">"xxxx.com"</span>,</span><br><span class="line"> <span class="attr">"server_port"</span>: <span class="number">52239</span>,</span><br><span class="line"> <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line"> <span class="attr">"local_port"</span>: <span class="number">1080</span>,</span><br><span class="line"> <span class="attr">"password"</span>: <span class="string">"SOME_PASSWORD"</span>,</span><br><span class="line"> <span class="attr">"timeout"</span>: <span class="number">600</span>,</span><br><span class="line"> <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line"> <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保存后将客户端运行在后台：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup sslocal -c /etc/shadowsocks/config.json /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>至此，Shadowsocks配置工作就完成了</p>
<h1 id="polipo配置方法"><a href="#polipo配置方法" class="headerlink" title="polipo配置方法"></a>polipo配置方法</h1><p>首先安装polipo：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install polipo</span><br></pre></td></tr></table></figure>
<p>接下来配置polipo，使其连接到本地Shadowsocks代理:<br>编辑文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/polipo/config</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># This file only needs to list configuration variables that deviate</span><br><span class="line"># from the default values.  See /usr/share/doc/polipo/examples/config.sample</span><br><span class="line"># and "polipo -v" for variables you can tweak and further information.</span><br><span class="line"></span><br><span class="line">logSyslog = true</span><br><span class="line">logFile = /var/log/polipo/polipo.log</span><br><span class="line"></span><br><span class="line">socksParentProxy = "127.0.0.1:1080"</span><br><span class="line">socksProxyType = socks5</span><br><span class="line"></span><br><span class="line">chunkHighMark = 50331648</span><br><span class="line">objectHighMark = 16384</span><br><span class="line"></span><br><span class="line">serverMaxSlots = 64</span><br><span class="line">serverSlots = 16</span><br><span class="line">serverSlots1 = 32</span><br><span class="line"></span><br><span class="line">proxyAddress = "0.0.0.0"</span><br><span class="line">proxyPort = 8123</span><br></pre></td></tr></table></figure>
<p>重启polipo服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service polipo restart</span><br></pre></td></tr></table></figure>
<p>至此，polipo配置工作完成。</p>
<h1 id="更改全局环境变量，使代理生效"><a href="#更改全局环境变量，使代理生效" class="headerlink" title="更改全局环境变量，使代理生效"></a>更改全局环境变量，使代理生效</h1><p>执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export http_proxy="http://127.0.0.1:8123"</span><br></pre></td></tr></table></figure>
<p>此时，Terminal已经可以访问外部网站了，可以使用curl测试。<br>若希望系统内所有app均使用代理，则需要在设置-&gt;网络中编辑代理选项，将http和https代理均改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">地址：127.0.0.1</span><br><span class="line">端口：8123</span><br></pre></td></tr></table></figure>
<p>即可。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Shadowsocks</tag>
        <tag>polipo</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown折叠代码块的方法</title>
    <url>/2020/02/19/markdown%E6%8A%98%E5%8F%A0%E4%BB%A3%E7%A0%81%E5%9D%97%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>&emsp;刚才在迁移远古博客的时候有一段特别特别长的代码段，如果单独放在前端里面显示估计也没几个人看得下去，所以就去查了一下怎么能吧那段代码 既保留 又折叠<br>&emsp;然后就有了下面的方法。</p>
<a id="more"></a>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>一般在插入代码段时使用三个`号（esc键下面的符号）<br>在这里要折叠代码段使用如下方法(我是格式警犬不要怪我占篇幅)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mark</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">darkred</span>&gt;</span>点击查看详细内容<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> - 测试 测试测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">code</span>&gt;</span>  </span><br><span class="line">for i in a:</span><br><span class="line">    print(i)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>summary：折叠语法展示的摘要</p>
<p>details：折叠语法标签</p>
<p>pre：以原有格式显示元素内的文字是已经格式化的文本。</p>
<p>blockcode：表示程序的代码块。</p>
<p>code：指定代码范例。</p>
<p>经过测试，可以直接在各标签中指定元素的style（即变色，字体大小什么的）</p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><details>
    <summary>
        <mark>
            <font color=darkred>点击查看详细内容</font>
        </mark>
    </summary>
  <p> - 测试 测试测试</p>
    <pre>
        <code>  
for i in a:
    print(i)
        </code>
    </pre>
</details>
<br><br>

<blockquote>
<p>资料来源：<a href="https://www.cnblogs.com/byho/p/10570145.html" target="_blank" rel="noopener">MarkDown折叠语法</a></p>
</blockquote>
]]></content>
      <categories>
        <category>博客建设</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView食用指南</title>
    <url>/2020/02/19/RecyclerView%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>&emsp;说起来也是好久没有写过博客了，这东西来来回回就忘了，当时的脑热造就了空白的内容，想想多少还是有些不合适。<br>&emsp;毕竟也是自己的经历，不如写出来分享一下，或者说，备忘吧。</p>
<h2 id="RecyclerView总述"><a href="#RecyclerView总述" class="headerlink" title="RecyclerView总述"></a>RecyclerView总述</h2><p>&emsp;安卓开发过程中总会遇到各种麻烦的事情。在编写浏览器时想要构造一个列表，这里面可以显示网站的标题和链接。这东西看起来感觉非常简单，尤其是在h5界面中编写。但是现在是安卓开发啊弟弟，用法根本不是想象中的那样搞一个模块然后findviewbyid啊。这里我踩了很多坑，并且构造过程真的非常麻烦（自我感觉），所以在这里开一个页面记录下我在这里是怎么解决问题的。</p>
<blockquote>
<p>RecyclerView 是一个增强版的ListView，不仅可以实现和ListView同样的效果，还优化了ListView中存在的各种不足之处（来自CSDN）。<br>RecyclerView 能够实现横向滚动，这是ListView所不能实现的（虽然我没用到这个233）</p>
</blockquote>
<a id="more"></a>

<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>&emsp;dependencies中要添加库的引用（以下库可能已过时）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile&amp;nbsp;<span class="string">'com.android.support:appcompat-v7:27.0.2'</span></span><br><span class="line">    compile&amp;nbsp;<span class="string">'com.android.support:recyclerview-v7:27.0.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;这里注意下后面的版本号要跟compileSdkVersion一致，不然可能会报错。</p>
<h2 id="布局引用"><a href="#布局引用" class="headerlink" title="布局引用"></a>布局引用</h2><p>&emsp;在要添加RecyclerView的布局中添加:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">linearlayout</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.recyclerview</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">linearlayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>&emsp;布局文件就到这里了，其实布局是非常简单的。。<br>&emsp;重点在下面的部分。</p>
<h2 id="适配器（Adapter）的创建"><a href="#适配器（Adapter）的创建" class="headerlink" title="适配器（Adapter）的创建"></a>适配器（Adapter）的创建</h2><h3 id="内容提供"><a href="#内容提供" class="headerlink" title="内容提供"></a>内容提供</h3><p>&emsp;首先我们要明确，创建这个适配器是要适配什么东西，在这里，作为一个浏览器，我打算让它提供页面的标题和链接，并且可以让它显示在RecyclerView中。所以我们先要创建最基本的类型，在这里我取名叫WindowInfo，很简单的一个类，并且在这个类中只需要提供setter和getter就行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String windowTitle;</span><br><span class="line">    <span class="keyword">private</span> String windowUrl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WindowInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        windowTitle = <span class="string">""</span>;</span><br><span class="line">        windowUrl = <span class="string">""</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WindowInfo</span><span class="params">(String title, String url)</span></span>&#123;</span><br><span class="line">        windowTitle = title;</span><br><span class="line">        windowUrl = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWindowTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> windowTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWindowUrl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> windowUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWindowTitle</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        windowTitle = title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;这里真的没什么说的，自定义的类都可以。</p>
<h3 id="适配器创建"><a href="#适配器创建" class="headerlink" title="适配器创建"></a>适配器创建</h3><p>&emsp;再新建一个类，我这里取名为WindowInfoAdapter，让这个类继承于RecyclerView.Adapter&lt;WindowInfoAdapter.ViewHolder&gt;，现在爆红先不要紧张，后面会填坑（<br>&emsp;在这个适配器的类中，我们需要创建一个内部的List表，用来存放外部传进来的提供的内容。既然要把外部的内容传进来，那么必不可少的就是构造函数了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WindowInfoAdapter</span><span class="params">(List&lt;windowinfo&gt; _windowList)</span></span>&#123;</span><br><span class="line">    windowList = _windowList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;但是我们不可能仅仅把参数传进来就完事吧，RecyclerView里面每个项目的排版不要面子的吗？<br>&emsp;新建一个布局，自己起名叫WindowInfoItem.xml，这个排版是用来设置RecyclerView 中每个项目里面元素的样式的，是不可缺少的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">linearlayout</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">ndroid:orientation</span>=<span class="string">"vertical"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"64dp"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_centervertical</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textview</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/title"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginstart</span>=<span class="string">"5dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginend</span>=<span class="string">"5dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:textcolor</span>=<span class="string">"#000000"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:textsize</span>=<span class="string">"20sp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleline</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textview</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/url"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginstart</span>=<span class="string">"5dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginend</span>=<span class="string">"5dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:textcolor</span>=<span class="string">"#c0c0c0"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:textsize</span>=<span class="string">"16sp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleline</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">linearlayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>&emsp;接下来的工作可以说是非常重要了，现在仅仅是将排版排好了，但是其中的部件都不能单独拿出来设置以及初始化呀。所以现在新建一个静态内部类ViewHolder使其继承自RecyclerView.ViewHolder，由它的名字就可以知道，这个类主要是用来承载所有的部件的，所以就可以在这里取得元素的id，并且对其进行初始化了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">    TextView Title;</span><br><span class="line">    TextView Url;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(view);</span><br><span class="line">        bookmarkTitle = (TextView) view.findViewById(R.id.title);</span><br><span class="line">        bookmarkUrl = (TextView) view.findViewById(R.id.url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;但这还没完呢，机器毕竟不是人，凭什么要按你的样式来？所以我们需要强制指定布局，重写onCreateViewHolder:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">    View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.WindowInfoItem, parent, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">final</span> ViewHolder viewHolder = <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line">    <span class="keyword">return</span> viewHolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;并且，就算是创建了ViewHolder，但是你并不能改变其内容，因为目前的ViewHolder很广泛，就如同大家的公用rbq一样，那可不行，得指定谁用谁的女朋友啊。所以，onBindViewHolder是必须得重写的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> ViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    WindowInfo windowInfo = windowList.get(position)</span><br><span class="line">    holder.Url.setText(<span class="string">""</span>);</span><br><span class="line">    holder.Title.setText(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;现在看看整个class，会发现在声明那里仍然是爆红的，不要慌，只需要将getItemCount重写就行了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> windowList.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;到这里为止，整个适配器就创建完成了，贴上整体的代码：</p>
<details>
    <summary><mark style="background: gray;color: white">点击查看详细代码</mark></summary>
    <pre language="java"><code>
public class WindowInfoAdapter extends RecyclerView.Adapter<windowinfo.viewholder> {
    private List<windowinfo> windowList;

<pre><code>static class ViewHolder extends RecyclerView.ViewHolder {
    TextView Title;
    TextView Url;

    public ViewHolder(View view){
        super(view);
        siteTitle = (TextView) view.findViewById(R.id.Title);
        siteUrl = (TextView) view.findViewById(R.id.Url);
    }
}

public WindowInfoAdapter(List&lt;windowinfo&gt; _windowList){
    windowList = _windowList;
}

@Override
public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
    View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.WindowInfoItem, parent, false);
    final ViewHolder viewHolder = new ViewHolder(view);
    return viewHolder;
}

@Override
public void onBindViewHolder(final ViewHolder holder, int position) {
    WindowInfo windowInfo = windowList.get(position);
    holder.Title.setText(&quot;&quot;);
    holder.Url.setText(&quot;&quot;);
}

@Override
public int getItemCount() {
    return windowList.size();
}</code></pre><p>}<br>    </code></pre></p>
</details>

<h2 id="RecyclerView启动！"><a href="#RecyclerView启动！" class="headerlink" title="RecyclerView启动！"></a>RecyclerView启动！</h2><p>&emsp;前面bb了一大堆，就是为这里打基础的，其实这里就很简单了，我们回到MainActivity中来，首先要做的是创建三个变量，分别是:</p>
<ul>
<li>内容提供类的一个列表：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;windowinfo&gt; windowInfoList;</span><br></pre></td></tr></table></figure></li>
<li>适配器：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> WindowInfoAdapter windowInfoAdapter;</span><br></pre></td></tr></table></figure></li>
<li>RecyclerView:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> RecyclerView windowInfoRecyclerView;</span><br></pre></td></tr></table></figure>
&emsp;再将RecyclerView实例化之后，我们只需要执行这几步:</li>
</ul>
<ul>
<li>先将内容绑定到适配器中：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">windowInfoAdapter = <span class="keyword">new</span> WindowInfoAdapter(windowInfoList);</span><br></pre></td></tr></table></figure></li>
<li>再将适配器与RecyclerView绑定：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">windowInfoRecyclerView.setAdapter(windowInfoAdapter);</span><br></pre></td></tr></table></figure></li>
<li>最后设置一些关于RecyclerView的比较重要的设定（分割线动画什么的）：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">windowInfoRecyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</span><br><span class="line">windowInfoRecyclerView.addItemDecoration(<span class="keyword">new</span> DividerItemDecoration(<span class="keyword">this</span>,DividerItemDecoration.VERTICAL));</span><br></pre></td></tr></table></figure>
&emsp;整个过程就结束了，这么一整理下来感觉真简单啊= =||</li>
</ul>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>&emsp;RecyclerView其实真的挺重要的，因为在大多数场合都会用到，并且与其他的View也能达到良好的兼容性，可以说很棒了。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>RecyclerView</tag>
      </tags>
  </entry>
  <entry>
    <title>first post</title>
    <url>/2020/02/11/first-post/</url>
    <content><![CDATA[<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world!"></a>hello world!</h1>]]></content>
  </entry>
</search>
