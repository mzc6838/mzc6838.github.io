<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YY的Blog~</title>
  
  
  <link href="http://mzc6838.github.io/atom.xml" rel="self"/>
  
  <link href="http://mzc6838.github.io/"/>
  <updated>2020-12-15T06:51:16.092Z</updated>
  <id>http://mzc6838.github.io/</id>
  
  <author>
    <name>mzc6838</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RGB颜色转换为16bits颜色的方法</title>
    <link href="http://mzc6838.github.io/2020/12/15/RGB%E9%A2%9C%E8%89%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA16bit%E9%A2%9C%E8%89%B2%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://mzc6838.github.io/2020/12/15/RGB%E9%A2%9C%E8%89%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA16bit%E9%A2%9C%E8%89%B2%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-12-15T06:30:28.000Z</published>
    <updated>2020-12-15T06:51:16.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>在使用MPS2自带的显示屏时，其中有一个方法用来在LCD上显示一张Bitmap，要求其颜色格式为16bits的颜色。由于以前都是使用RGB颜色，现在突然要使用16bits颜色，并不熟悉，所以就去了解了一下。</p><a id="more"></a><h1 id="16bits颜色格式"><a href="#16bits颜色格式" class="headerlink" title="16bits颜色格式"></a>16bits颜色格式</h1><p>按照一篇博客中的说法，RGB颜色是24位的，要将24位颜色转换为16位，需要将每种颜色的值进行移位并舍去部分。具体过程如下：  </p><ul><li>红色(R)右移3位</li><li>绿色(G)右移2位</li><li>蓝色(B)右移3位  </li></ul><p>正常24bits颜色如下：  </p><center><font style="color: red;">RRRR RRRR </font><font style="color: green;">GGGG GGGG </font><font style="color: blue;">BBBB BBBB</font></center>按照上述移位过程后，按原来的RGB顺序组合即为16bits颜色  <center><font style="color: red;">RRRR R</font><font style="color: green;">GGG GGG</font><font style="color: blue;">B BBBB</font></center><blockquote><p>参考博文: <a href="https://www.cnblogs.com/eruca520/p/10189909.html" target="_blank" rel="noopener">如何将24位RGB颜色转换16位RGB颜色</a> </p></blockquote><h1 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h1><p>由于位数并不对齐（指会出现5bits、6bits这种位宽的数据），在转换时需要使用位运算：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> short <span class="title">RGB2bit</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> R, <span class="keyword">unsigned</span> <span class="keyword">char</span> G, <span class="keyword">unsigned</span> <span class="keyword">char</span> B)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((R &gt;&gt; <span class="number">3</span>) &lt;&lt; <span class="number">11</span>) | ((G &gt;&gt; <span class="number">2</span>) &lt;&lt; <span class="number">5</span>) | (B &gt;&gt; <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;在使用MPS2自带的显示屏时，其中有一个方法用来在LCD上显示一张Bitmap，要求其颜色格式为16bits的颜色。由于以前都是使用RGB颜色，现在突然要使用16bits颜色，并不熟悉，所以就去了解了一下。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://mzc6838.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://mzc6838.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二进制数转换为BCD码的一种算法</title>
    <link href="http://mzc6838.github.io/2020/10/30/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%B8%BABCD%E7%A0%81%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%97%E6%B3%95/"/>
    <id>http://mzc6838.github.io/2020/10/30/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%B8%BABCD%E7%A0%81%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%97%E6%B3%95/</id>
    <published>2020-10-30T06:52:06.000Z</published>
    <updated>2020-11-26T03:41:58.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>七段数码管想要显示十进制数字，需要将原始输入的二进制数字转换为每一位对应的长度为7的二进制数。例如，数字5对应数码管显示应该为</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以共阴极为例</span></span><br><span class="line"><span class="number">5</span>: seg_t = <span class="number">7'b1011011</span>;</span><br></pre></td></tr></table></figure><p>但是如果待显示的数字为二进制表示的一个数，并且在fpga对除法运算的效率极差的情况下，是否可用一种组合逻辑电路将该数字转换成BCD码，进而可以方便地使用数码管显示。</p><a id="more"></a><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>网上找到了相关二进制转BCD码的一个算法，并且提供了相关例程代码。<br>该算法的具体过程如下：</p><ol><li>如果某列的数比5大，则给该列的数+3。</li><li>将列中所有的数左移1位，末尾用原数的对应位二进制补上。</li><li>如果左移8位后，不会再产生变化，则算法结束，此时列表中的对应列就是所需要的BCD编码。</li><li>回到步骤1继续执行。</li></ol><p>算法示例使用的原数为8位二进制的数，但以相同的算法，可以做到任意位数二进制数转BCD编码。</p><p>例程代码如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> BCD(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] binary,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] Hundreds,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] Tens,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] Ones</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">integer</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(binary) <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">//置位</span></span><br><span class="line">        Hundreds = <span class="number">4'd0</span>;</span><br><span class="line">        Tens = <span class="number">4'd0</span>;</span><br><span class="line">        Ones = <span class="number">4'd0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i = i - <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">//大于等于5判断</span></span><br><span class="line">            <span class="keyword">if</span> (Hundreds &gt;= <span class="number">5</span>) </span><br><span class="line">                Hundreds = Hundreds + <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span> (Tens &gt;= <span class="number">5</span>) </span><br><span class="line">                Tens = Tens + <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span> (Ones &gt;= <span class="number">5</span>) </span><br><span class="line">                Ones = Ones + <span class="number">3</span>;</span><br><span class="line">            <span class="comment">//移位</span></span><br><span class="line">            Hundreds = Hundreds &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            Hundreds[<span class="number">0</span>] = Tens[<span class="number">3</span>];</span><br><span class="line">            Tens = Tens &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            Tens[<span class="number">0</span>] = Ones[<span class="number">3</span>];</span><br><span class="line">            Ones = Ones &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            Ones[<span class="number">0</span>] = binary[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>网站链接在这里：<a href="https://my.eng.utah.edu/~nmcdonal/Tutorials/BCDTutorial/BCDConversion.html" target="_blank" rel="noopener">Binary to BCD</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;七段数码管想要显示十进制数字，需要将原始输入的二进制数字转换为每一位对应的长度为7的二进制数。例如，数字5对应数码管显示应该为&lt;/p&gt;
&lt;figure class=&quot;highlight verilog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//以共阴极为例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;: seg_t = &lt;span class=&quot;number&quot;&gt;7&#39;b1011011&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是如果待显示的数字为二进制表示的一个数，并且在fpga对除法运算的效率极差的情况下，是否可用一种组合逻辑电路将该数字转换成BCD码，进而可以方便地使用数码管显示。&lt;/p&gt;</summary>
    
    
    
    <category term="verilog" scheme="http://mzc6838.github.io/categories/verilog/"/>
    
    <category term="算法" scheme="http://mzc6838.github.io/categories/verilog/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://mzc6838.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="verilog" scheme="http://mzc6838.github.io/tags/verilog/"/>
    
  </entry>
  
  <entry>
    <title>关于tensorflow解析csv的问题</title>
    <link href="http://mzc6838.github.io/2020/09/12/%E5%85%B3%E4%BA%8Etensorflow%E8%A7%A3%E6%9E%90csv%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://mzc6838.github.io/2020/09/12/%E5%85%B3%E4%BA%8Etensorflow%E8%A7%A3%E6%9E%90csv%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-09-12T03:33:22.000Z</published>
    <updated>2020-11-26T03:41:58.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>初学tensorflow，看教程中引入波士顿房价数据，自己使用curl导入后，在csv解析过程中出现了问题。错误信息如下图所示<br><img src="/2020/09/12/%E5%85%B3%E4%BA%8Etensorflow%E8%A7%A3%E6%9E%90csv%E7%9A%84%E9%97%AE%E9%A2%98/error.png" alt="错误提示"></p><a id="more"></a><h1 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h1><p>原始csv数据在网站上以空格字符和换行符分割，在本地处理该数据时，只是单纯地去掉了换行符。因为自己觉得空格也能被解析，直到用excel打开这个csv文件后发现不对：<br><img src="/2020/09/12/%E5%85%B3%E4%BA%8Etensorflow%E8%A7%A3%E6%9E%90csv%E7%9A%84%E9%97%AE%E9%A2%98/befor.png" alt="错误的csv格式"><br>看起来是正确的，直到我把第一列拉宽：<br><img src="/2020/09/12/%E5%85%B3%E4%BA%8Etensorflow%E8%A7%A3%E6%9E%90csv%E7%9A%84%E9%97%AE%E9%A2%98/after.png" alt="第一列"></p><h1 id="更正方式"><a href="#更正方式" class="headerlink" title="更正方式"></a>更正方式</h1><p>使用python将原始文件打开，因为有的空缺部分是两个空格，有的是三个空格字符，所以这次使用了两次.replace()方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removenbsp</span><span class="params">()</span>:</span></span><br><span class="line">    f = open(<span class="string">'boston_housing_t.csv'</span>, <span class="string">"r"</span>)</span><br><span class="line">    o = open(<span class="string">'boston_housing_t_t.csv'</span>, <span class="string">"w"</span>)</span><br><span class="line">    l = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        t = i.replace(<span class="string">' '</span>, <span class="string">','</span>)</span><br><span class="line">        t = t[<span class="number">1</span>:]</span><br><span class="line">        t = t.replace(<span class="string">',,'</span>, <span class="string">','</span>)</span><br><span class="line">        t = t.replace(<span class="string">',,'</span>, <span class="string">','</span>)</span><br><span class="line">        o.write(t)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    f.close()</span><br><span class="line">    o.close()</span><br></pre></td></tr></table></figure><p>代码执行后的csv文件中的数据格式就可以正确解析了：<br><img src="/2020/09/12/%E5%85%B3%E4%BA%8Etensorflow%E8%A7%A3%E6%9E%90csv%E7%9A%84%E9%97%AE%E9%A2%98/correct.png" alt="正确的解析"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;初学tensorflow，看教程中引入波士顿房价数据，自己使用curl导入后，在csv解析过程中出现了问题。错误信息如下图所示&lt;br&gt;&lt;img src=&quot;/2020/09/12/%E5%85%B3%E4%BA%8Etensorflow%E8%A7%A3%E6%9E%90csv%E7%9A%84%E9%97%AE%E9%A2%98/error.png&quot; alt=&quot;错误提示&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://mzc6838.github.io/categories/python/"/>
    
    <category term="机器学习" scheme="http://mzc6838.github.io/categories/python/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Tensorflow" scheme="http://mzc6838.github.io/tags/Tensorflow/"/>
    
    <category term="csv" scheme="http://mzc6838.github.io/tags/csv/"/>
    
  </entry>
  
  <entry>
    <title>find中加号问题</title>
    <link href="http://mzc6838.github.io/2020/06/19/find%E4%B8%AD%E5%8A%A0%E5%8F%B7%E9%97%AE%E9%A2%98/"/>
    <id>http://mzc6838.github.io/2020/06/19/find%E4%B8%AD%E5%8A%A0%E5%8F%B7%E9%97%AE%E9%A2%98/</id>
    <published>2020-06-19T04:13:57.000Z</published>
    <updated>2020-11-26T03:41:58.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>安装galileo编译链时有个脚本，怎么都装不进去，报错为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./install_script.sh  </span><br><span class="line">Setting it up...find: 非法权限 `+111<span class="string">'</span></span><br><span class="line"><span class="string">/tmp/tmp.bbrqETRw01/relocate_sdk.sh /home/mzc6838/i586/relocate_sdk.sh</span></span><br><span class="line"><span class="string">SDK could not be set up. Relocate script failed. Abort!</span></span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="找问题"><a href="#找问题" class="headerlink" title="找问题"></a>找问题</h1><p>既然是find出现的问题，还是+111这种，直接搜索install_script.sh里面“+111”有这么一条：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">executable_files=$(<span class="variable">$SUDO_EXEC</span> find <span class="string">"<span class="variable">$native_sysroot</span>"</span> -<span class="built_in">type</span> f -perm +111 -<span class="built_in">exec</span> <span class="built_in">printf</span> <span class="string">"\"%s\" "</span> &#123;&#125; \; )</span><br></pre></td></tr></table></figure><p>我寻思不对啊，网上找了一圈都说+号可以用，表示权限中任意一个1匹配<br></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在我重新百度了好久之后，找到了解决办法就是：</p><blockquote><p>用”/“代替”+”</p></blockquote><p>可以，很顶的操作，确实有效。<br>原话是这么说的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">perm +mode</span><br><span class="line">              This  is  no  longer  supported  (and  has been deprecated since</span><br><span class="line">              2005).  Use -perm &#x2F;mode instead.</span><br></pre></td></tr></table></figure><p>所以这么看来网上那些复制人都是2005年的老古董咯</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;安装galileo编译链时有个脚本，怎么都装不进去，报错为：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo ./install_script.sh  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Setting it up...find: 非法权限 `+111&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;/tmp/tmp.bbrqETRw01/relocate_sdk.sh /home/mzc6838/i586/relocate_sdk.sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;SDK could not be set up. Relocate script failed. Abort!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://mzc6838.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="http://mzc6838.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下安装Shadowsocks客户端并全局代理的方式</title>
    <link href="http://mzc6838.github.io/2020/02/23/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Shadowsocks%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B9%B6%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://mzc6838.github.io/2020/02/23/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Shadowsocks%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B9%B6%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F/</id>
    <published>2020-02-23T15:35:18.000Z</published>
    <updated>2020-11-26T03:41:58.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>因为学校要学嵌入式，要求装ubuntu，所以就想着把系统好好弄一下做好长期使用的准备。在安装完了Chrome之后想同步书签，自然想到了Shadowsocks来进行http和https的代理。</p><a id="more"></a><h1 id="Shadowsocks配置方法"><a href="#Shadowsocks配置方法" class="headerlink" title="Shadowsocks配置方法"></a>Shadowsocks配置方法</h1><p>首先安装Shadowsocks：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install shadowsocks</span><br></pre></td></tr></table></figure><p>接下来配置Shadowsocks的配置文件，使其连接到ss服务器：<br>编辑文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"server"</span>: <span class="string">"xxxx.com"</span>,</span><br><span class="line"> <span class="attr">"server_port"</span>: <span class="number">52239</span>,</span><br><span class="line"> <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line"> <span class="attr">"local_port"</span>: <span class="number">1080</span>,</span><br><span class="line"> <span class="attr">"password"</span>: <span class="string">"SOME_PASSWORD"</span>,</span><br><span class="line"> <span class="attr">"timeout"</span>: <span class="number">600</span>,</span><br><span class="line"> <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line"> <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存后将客户端运行在后台：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sslocal -c /etc/shadowsocks/config.json /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>至此，Shadowsocks配置工作就完成了</p><h1 id="polipo配置方法"><a href="#polipo配置方法" class="headerlink" title="polipo配置方法"></a>polipo配置方法</h1><p>首先安装polipo：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install polipo</span><br></pre></td></tr></table></figure><p>接下来配置polipo，使其连接到本地Shadowsocks代理:<br>编辑文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/polipo/config</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># This file only needs to list configuration variables that deviate</span><br><span class="line"># from the default values.  See /usr/share/doc/polipo/examples/config.sample</span><br><span class="line"># and "polipo -v" for variables you can tweak and further information.</span><br><span class="line"></span><br><span class="line">logSyslog = true</span><br><span class="line">logFile = /var/log/polipo/polipo.log</span><br><span class="line"></span><br><span class="line">socksParentProxy = "127.0.0.1:1080"</span><br><span class="line">socksProxyType = socks5</span><br><span class="line"></span><br><span class="line">chunkHighMark = 50331648</span><br><span class="line">objectHighMark = 16384</span><br><span class="line"></span><br><span class="line">serverMaxSlots = 64</span><br><span class="line">serverSlots = 16</span><br><span class="line">serverSlots1 = 32</span><br><span class="line"></span><br><span class="line">proxyAddress = "0.0.0.0"</span><br><span class="line">proxyPort = 8123</span><br></pre></td></tr></table></figure><p>重启polipo服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service polipo restart</span><br></pre></td></tr></table></figure><p>至此，polipo配置工作完成。</p><h1 id="更改全局环境变量，使代理生效"><a href="#更改全局环境变量，使代理生效" class="headerlink" title="更改全局环境变量，使代理生效"></a>更改全局环境变量，使代理生效</h1><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy="http://127.0.0.1:8123"</span><br></pre></td></tr></table></figure><p>此时，Terminal已经可以访问外部网站了，可以使用curl测试。<br>若希望系统内所有app均使用代理，则需要在设置-&gt;网络中编辑代理选项，将http和https代理均改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">地址：127.0.0.1</span><br><span class="line">端口：8123</span><br></pre></td></tr></table></figure><p>即可。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;因为学校要学嵌入式，要求装ubuntu，所以就想着把系统好好弄一下做好长期使用的准备。在安装完了Chrome之后想同步书签，自然想到了Shadowsocks来进行http和https的代理。&lt;/p&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://mzc6838.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Shadowsocks" scheme="http://mzc6838.github.io/tags/Shadowsocks/"/>
    
    <category term="polipo" scheme="http://mzc6838.github.io/tags/polipo/"/>
    
    <category term="Linux" scheme="http://mzc6838.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>markdown折叠代码块的方法</title>
    <link href="http://mzc6838.github.io/2020/02/19/markdown%E6%8A%98%E5%8F%A0%E4%BB%A3%E7%A0%81%E5%9D%97%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://mzc6838.github.io/2020/02/19/markdown%E6%8A%98%E5%8F%A0%E4%BB%A3%E7%A0%81%E5%9D%97%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-02-19T13:22:47.000Z</published>
    <updated>2020-02-19T14:39:54.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>&emsp;刚才在迁移远古博客的时候有一段特别特别长的代码段，如果单独放在前端里面显示估计也没几个人看得下去，所以就去查了一下怎么能吧那段代码 既保留 又折叠<br>&emsp;然后就有了下面的方法。</p><a id="more"></a><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>一般在插入代码段时使用三个`号（esc键下面的符号）<br>在这里要折叠代码段使用如下方法(我是格式警犬不要怪我占篇幅)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mark</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">darkred</span>&gt;</span>点击查看详细内容<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> - 测试 测试测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">code</span>&gt;</span>  </span><br><span class="line">for i in a:</span><br><span class="line">    print(i)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><p>summary：折叠语法展示的摘要</p><p>details：折叠语法标签</p><p>pre：以原有格式显示元素内的文字是已经格式化的文本。</p><p>blockcode：表示程序的代码块。</p><p>code：指定代码范例。</p><p>经过测试，可以直接在各标签中指定元素的style（即变色，字体大小什么的）</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><details>    <summary>        <mark>            <font color="darkred">点击查看详细内容</font>        </mark>    </summary>  <p> - 测试 测试测试</p>    <pre>        <code>  for i in a:    print(i)        </code>    </pre></details><br><br><blockquote><p>资料来源：<a href="https://www.cnblogs.com/byho/p/10570145.html" target="_blank" rel="noopener">MarkDown折叠语法</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h1&gt;&lt;p&gt;&amp;emsp;刚才在迁移远古博客的时候有一段特别特别长的代码段，如果单独放在前端里面显示估计也没几个人看得下去，所以就去查了一下怎么能吧那段代码 既保留 又折叠&lt;br&gt;&amp;emsp;然后就有了下面的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="博客建设" scheme="http://mzc6838.github.io/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="markdown" scheme="http://mzc6838.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView食用指南</title>
    <link href="http://mzc6838.github.io/2020/02/19/RecyclerView%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://mzc6838.github.io/2020/02/19/RecyclerView%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</id>
    <published>2020-02-19T12:15:40.000Z</published>
    <updated>2020-02-19T13:41:09.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>&emsp;说起来也是好久没有写过博客了，这东西来来回回就忘了，当时的脑热造就了空白的内容，想想多少还是有些不合适。<br>&emsp;毕竟也是自己的经历，不如写出来分享一下，或者说，备忘吧。</p><h2 id="RecyclerView总述"><a href="#RecyclerView总述" class="headerlink" title="RecyclerView总述"></a>RecyclerView总述</h2><p>&emsp;安卓开发过程中总会遇到各种麻烦的事情。在编写浏览器时想要构造一个列表，这里面可以显示网站的标题和链接。这东西看起来感觉非常简单，尤其是在h5界面中编写。但是现在是安卓开发啊弟弟，用法根本不是想象中的那样搞一个模块然后findviewbyid啊。这里我踩了很多坑，并且构造过程真的非常麻烦（自我感觉），所以在这里开一个页面记录下我在这里是怎么解决问题的。</p><blockquote><p>RecyclerView 是一个增强版的ListView，不仅可以实现和ListView同样的效果，还优化了ListView中存在的各种不足之处（来自CSDN）。<br>RecyclerView 能够实现横向滚动，这是ListView所不能实现的（虽然我没用到这个233）</p></blockquote><a id="more"></a><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>&emsp;dependencies中要添加库的引用（以下库可能已过时）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile&amp;nbsp;<span class="string">'com.android.support:appcompat-v7:27.0.2'</span></span><br><span class="line">    compile&amp;nbsp;<span class="string">'com.android.support:recyclerview-v7:27.0.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;这里注意下后面的版本号要跟compileSdkVersion一致，不然可能会报错。</p><h2 id="布局引用"><a href="#布局引用" class="headerlink" title="布局引用"></a>布局引用</h2><p>&emsp;在要添加RecyclerView的布局中添加:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">linearlayout</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.recyclerview</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">linearlayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;布局文件就到这里了，其实布局是非常简单的。。<br>&emsp;重点在下面的部分。</p><h2 id="适配器（Adapter）的创建"><a href="#适配器（Adapter）的创建" class="headerlink" title="适配器（Adapter）的创建"></a>适配器（Adapter）的创建</h2><h3 id="内容提供"><a href="#内容提供" class="headerlink" title="内容提供"></a>内容提供</h3><p>&emsp;首先我们要明确，创建这个适配器是要适配什么东西，在这里，作为一个浏览器，我打算让它提供页面的标题和链接，并且可以让它显示在RecyclerView中。所以我们先要创建最基本的类型，在这里我取名叫WindowInfo，很简单的一个类，并且在这个类中只需要提供setter和getter就行了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String windowTitle;</span><br><span class="line">    <span class="keyword">private</span> String windowUrl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WindowInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        windowTitle = <span class="string">""</span>;</span><br><span class="line">        windowUrl = <span class="string">""</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WindowInfo</span><span class="params">(String title, String url)</span></span>&#123;</span><br><span class="line">        windowTitle = title;</span><br><span class="line">        windowUrl = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWindowTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> windowTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWindowUrl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> windowUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWindowTitle</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        windowTitle = title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;这里真的没什么说的，自定义的类都可以。</p><h3 id="适配器创建"><a href="#适配器创建" class="headerlink" title="适配器创建"></a>适配器创建</h3><p>&emsp;再新建一个类，我这里取名为WindowInfoAdapter，让这个类继承于RecyclerView.Adapter&lt;WindowInfoAdapter.ViewHolder&gt;，现在爆红先不要紧张，后面会填坑（<br>&emsp;在这个适配器的类中，我们需要创建一个内部的List表，用来存放外部传进来的提供的内容。既然要把外部的内容传进来，那么必不可少的就是构造函数了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WindowInfoAdapter</span><span class="params">(List&lt;windowinfo&gt; _windowList)</span></span>&#123;</span><br><span class="line">    windowList = _windowList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;但是我们不可能仅仅把参数传进来就完事吧，RecyclerView里面每个项目的排版不要面子的吗？<br>&emsp;新建一个布局，自己起名叫WindowInfoItem.xml，这个排版是用来设置RecyclerView 中每个项目里面元素的样式的，是不可缺少的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">linearlayout</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">ndroid:orientation</span>=<span class="string">"vertical"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"64dp"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_centervertical</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textview</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/title"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginstart</span>=<span class="string">"5dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginend</span>=<span class="string">"5dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:textcolor</span>=<span class="string">"#000000"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:textsize</span>=<span class="string">"20sp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleline</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textview</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/url"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginstart</span>=<span class="string">"5dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginend</span>=<span class="string">"5dp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:textcolor</span>=<span class="string">"#c0c0c0"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:textsize</span>=<span class="string">"16sp"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleline</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">linearlayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;接下来的工作可以说是非常重要了，现在仅仅是将排版排好了，但是其中的部件都不能单独拿出来设置以及初始化呀。所以现在新建一个静态内部类ViewHolder使其继承自RecyclerView.ViewHolder，由它的名字就可以知道，这个类主要是用来承载所有的部件的，所以就可以在这里取得元素的id，并且对其进行初始化了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">    TextView Title;</span><br><span class="line">    TextView Url;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(view);</span><br><span class="line">        bookmarkTitle = (TextView) view.findViewById(R.id.title);</span><br><span class="line">        bookmarkUrl = (TextView) view.findViewById(R.id.url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;但这还没完呢，机器毕竟不是人，凭什么要按你的样式来？所以我们需要强制指定布局，重写onCreateViewHolder:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">    View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.WindowInfoItem, parent, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">final</span> ViewHolder viewHolder = <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line">    <span class="keyword">return</span> viewHolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;并且，就算是创建了ViewHolder，但是你并不能改变其内容，因为目前的ViewHolder很广泛，就如同大家的公用rbq一样，那可不行，得指定谁用谁的女朋友啊。所以，onBindViewHolder是必须得重写的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> ViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    WindowInfo windowInfo = windowList.get(position)</span><br><span class="line">    holder.Url.setText(<span class="string">""</span>);</span><br><span class="line">    holder.Title.setText(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;现在看看整个class，会发现在声明那里仍然是爆红的，不要慌，只需要将getItemCount重写就行了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> windowList.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;到这里为止，整个适配器就创建完成了，贴上整体的代码：</p><details>    <summary><mark style="background: gray;color: white">点击查看详细代码</mark></summary>    <pre language="java"><code>public class WindowInfoAdapter extends RecyclerView.Adapter<windowinfo.viewholder> {    private List<windowinfo> windowList;<pre><code>static class ViewHolder extends RecyclerView.ViewHolder {    TextView Title;    TextView Url;    public ViewHolder(View view){        super(view);        siteTitle = (TextView) view.findViewById(R.id.Title);        siteUrl = (TextView) view.findViewById(R.id.Url);    }}public WindowInfoAdapter(List&lt;windowinfo&gt; _windowList){    windowList = _windowList;}@Overridepublic ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {    View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.WindowInfoItem, parent, false);    final ViewHolder viewHolder = new ViewHolder(view);    return viewHolder;}@Overridepublic void onBindViewHolder(final ViewHolder holder, int position) {    WindowInfo windowInfo = windowList.get(position);    holder.Title.setText(&quot;&quot;);    holder.Url.setText(&quot;&quot;);}@Overridepublic int getItemCount() {    return windowList.size();}</code></pre><p>}<br>    </p></windowinfo></windowinfo.viewholder></code></pre><p></p></details><h2 id="RecyclerView启动！"><a href="#RecyclerView启动！" class="headerlink" title="RecyclerView启动！"></a>RecyclerView启动！</h2><p>&emsp;前面bb了一大堆，就是为这里打基础的，其实这里就很简单了，我们回到MainActivity中来，首先要做的是创建三个变量，分别是:</p><ul><li>内容提供类的一个列表：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;windowinfo&gt; windowInfoList;</span><br></pre></td></tr></table></figure></li><li>适配器：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> WindowInfoAdapter windowInfoAdapter;</span><br></pre></td></tr></table></figure></li><li>RecyclerView:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> RecyclerView windowInfoRecyclerView;</span><br></pre></td></tr></table></figure>&emsp;再将RecyclerView实例化之后，我们只需要执行这几步:</li></ul><ul><li>先将内容绑定到适配器中：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">windowInfoAdapter = <span class="keyword">new</span> WindowInfoAdapter(windowInfoList);</span><br></pre></td></tr></table></figure></li><li>再将适配器与RecyclerView绑定：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">windowInfoRecyclerView.setAdapter(windowInfoAdapter);</span><br></pre></td></tr></table></figure></li><li>最后设置一些关于RecyclerView的比较重要的设定（分割线动画什么的）：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">windowInfoRecyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</span><br><span class="line">windowInfoRecyclerView.addItemDecoration(<span class="keyword">new</span> DividerItemDecoration(<span class="keyword">this</span>,DividerItemDecoration.VERTICAL));</span><br></pre></td></tr></table></figure>&emsp;整个过程就结束了，这么一整理下来感觉真简单啊= =||</li></ul><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>&emsp;RecyclerView其实真的挺重要的，因为在大多数场合都会用到，并且与其他的View也能达到良好的兼容性，可以说很棒了。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;&amp;emsp;说起来也是好久没有写过博客了，这东西来来回回就忘了，当时的脑热造就了空白的内容，想想多少还是有些不合适。&lt;br&gt;&amp;emsp;毕竟也是自己的经历，不如写出来分享一下，或者说，备忘吧。&lt;/p&gt;
&lt;h2 id=&quot;RecyclerView总述&quot;&gt;&lt;a href=&quot;#RecyclerView总述&quot; class=&quot;headerlink&quot; title=&quot;RecyclerView总述&quot;&gt;&lt;/a&gt;RecyclerView总述&lt;/h2&gt;&lt;p&gt;&amp;emsp;安卓开发过程中总会遇到各种麻烦的事情。在编写浏览器时想要构造一个列表，这里面可以显示网站的标题和链接。这东西看起来感觉非常简单，尤其是在h5界面中编写。但是现在是安卓开发啊弟弟，用法根本不是想象中的那样搞一个模块然后findviewbyid啊。这里我踩了很多坑，并且构造过程真的非常麻烦（自我感觉），所以在这里开一个页面记录下我在这里是怎么解决问题的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RecyclerView 是一个增强版的ListView，不仅可以实现和ListView同样的效果，还优化了ListView中存在的各种不足之处（来自CSDN）。&lt;br&gt;RecyclerView 能够实现横向滚动，这是ListView所不能实现的（虽然我没用到这个233）&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Android" scheme="http://mzc6838.github.io/categories/Android/"/>
    
    
    <category term="RecyclerView" scheme="http://mzc6838.github.io/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>first post</title>
    <link href="http://mzc6838.github.io/2020/02/11/first-post/"/>
    <id>http://mzc6838.github.io/2020/02/11/first-post/</id>
    <published>2020-02-11T03:07:31.000Z</published>
    <updated>2020-02-11T03:16:15.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world!"></a>hello world!</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hello-world&quot;&gt;&lt;a href=&quot;#hello-world&quot; class=&quot;headerlink&quot; title=&quot;hello world!&quot;&gt;&lt;/a&gt;hello world!&lt;/h1&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
